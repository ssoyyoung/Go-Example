package main

import "github.com/ssoyyoung.p/Go-Example/pkg/test"

// Go는 패키지를 통해 코드의 모듈화, 코드의 재사용 기능을 제공
// 패키지를 사용해서 작은 단위의 컴포넌트를 작성, 이러한 작은 패키지들을 활용해서 프로그램을 작성할 것을 권장

// 표준 라이브러리 ========
// Go는 실제 프로그램 개발에 필요한 많은 패키지를 표준 라이브러리로 제공
// 표준 라이브러리 패키지들은 GOROOT/pkg 안에 존재
// Go에 사용하는 표준패키지는 https://golang.org/pkg 에 자세히 설명

// MAIN ========
// "main" 이라고 명명된 패키지는 Go Compiler에 의해 특별하게 인식된다.
// 패키지명이 main 인 경우, 컴파일러는 해당 패키지를 공유 라이브러리가 아닌 실행(executable) 프로그램으로 만든다.
// 이 main 패키지 안의 main() 함수가 프로그램의 시작점 즉 Entry Point가 된다

// public, private ========
// 패키지 내에는 함수, 구조체, 인터페이스, 메서드 등이 존재하는데,
// 이들의 이름(Identifier)이 첫문자를 대문자로 시작하면 이는 public 으로 사용할 수 있다
// 이름이 소문자로 시작하면 이는 non-public 으로 패키지 내부에서만 사용될 수 있다.

// init, alias ========
// 패키지를 작성할 때, 패키지 실행시 처음으로 호출되는 init() 함수를 작성할 수 있다.
// 즉, init 함수는 패키지가 로드되면서 실행되는 함수로 별도의 호출 없이 자동으로 호출
// 패키지를 import하면서 단지 그 패키지 안의 init() 함수만을 호출하고자 하는 케이스가 있다.
// 패키지 import 시 _ 라는 alias 를 지정

// 사용자 정의 패키지 ========
// 일반적으로 폴더를 하나 만들고 그 폴더 안에 .go 파일들을 만들어 구성
// 하나의 서브 폴더안에 있는 .go 파일들은 동일한 패키지명을 가지며, 패키지명은 해당 폴더의 이름과 같게 한다
// 즉, 해당 폴더에 있는 여러 *.go 파일들은 하나의 패키지로 묶인다.

func main() {
	// 사용자 정의 패키지 테스트
	test.Test1()
	test.Test2()

}
